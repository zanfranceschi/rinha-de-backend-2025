worker_processes auto;
worker_rlimit_nofile 65535;
error_log /dev/stderr warn;

events {
    use epoll;
    worker_connections 2048;
    multi_accept on;
    accept_mutex off;
}

http {
    lua_shared_dict api_selector 1m;
    lua_socket_pool_size 512;
    
    tcp_nopush on;
    tcp_nodelay on;
    sendfile on;
    keepalive_timeout 30;
    keepalive_requests 2000;
    
    client_body_buffer_size 64k;
    client_max_body_size 512k;
    client_body_timeout 5s;
    client_header_timeout 5s;
    
    access_log off;

    upstream api_pool {
        least_conn;
        server unix:/var/run/api_1.sock weight=1 max_fails=1 fail_timeout=5s;
        server unix:/var/run/api_2.sock weight=1 max_fails=1 fail_timeout=5s;
        keepalive 256;
        keepalive_requests 2000;
    }

    server {
        listen 80;
        
        location = /payments {
            if ($request_method != POST) {
                return 405;
            }
            
            content_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                
                if not body then
                    local body_file = ngx.req.get_body_file()
                    if body_file then
                        local file = io.open(body_file, "r")
                        if file then
                            body = file:read("*all")
                            file:close()
                        end
                    end
                end
                
                ngx.status = 200
                ngx.header.content_length = 0
                ngx.eof()
                
                if not body or body == "" then
                    return
                end
                
                local body_len = string.len(body)
                
                local shared_dict = ngx.shared.api_selector
                local current = shared_dict:incr("current", 1, 0) or 1
                local api_num = (current % 2) + 1

                local socket_path = api_num == 1 and "unix:/var/run/api_1.sock" or "unix:/var/run/api_2.sock"
                local fallback_path = api_num == 1 and "unix:/var/run/api_2.sock" or "unix:/var/run/api_1.sock"

                -- Timer otimizado com timeouts menores
                local function send_to_api(premature)
                    if premature then return end
                    
                    local sock = ngx.socket.tcp()
                    sock:settimeouts(250, 500, 500)
                    
                    local ok = sock:connect(socket_path)
                    if not ok then
                        ok = sock:connect(fallback_path)
                    end
                    
                    if ok then
                        sock:send(string.format(
                            "POST /payments HTTP/1.1\r\nHost: localhost\r\nContent-Type: application/json\r\nContent-Length: %d\r\nConnection: keep-alive\r\n\r\n%s",
                            body_len, body
                        ))
                    end
                    sock:close()
                end
                
                ngx.timer.at(0, send_to_api)
            }
        }

        location / {
            proxy_pass http://api_pool;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}